#!/usr/bin/env python

#
# Ideas:
#
# - less a particular file without having to 'check it out'. co in the background
# - use the PAGER
# - doc cmdline args, do help
# 
# - filter out cvs and gits verbose outputs
#

import os, sys, re, types, commands, stat
from optparse import OptionParser


### Commands
(CMD_STATUS, CMD_VSTATUS, CMD_CLONE, CMD_COMMIT, CMD_ADD, CMD_REMOVE, CMD_LOG,
 CMD_REVERT, CMD_UPDATE, CMD_PULL, CMD_PUSH, CMD_SYNC, CMD_PEND, CMD_URL,
 CMD_BACKUP, CMD_DIFF, CMD_TOP) = range(0, 17)

CMD_NAMES = {
    CMD_STATUS : "status",
    CMD_VSTATUS : "vstatus",
    CMD_CLONE : "clone",
    CMD_COMMIT : "commit",
    CMD_ADD : "add",
    CMD_REMOVE : "remove",
    CMD_LOG : "log",
    CMD_REVERT : "revert",
    CMD_UPDATE : "update",
    CMD_PULL : "pull",
    CMD_PUSH : "push",
    CMD_SYNC : "sync",
    CMD_PEND : "pend",
    CMD_URL : "url",
    CMD_BACKUP : "backup",
    CMD_DIFF : "diff",
    CMD_TOP : "top",
    }

# Yeah a trie would be better, but its really not required and I dont feel like
# making one, so there.
CMDS = {
    "status" : CMD_STATUS,
    "stat" : CMD_STATUS,
    "s" : CMD_STATUS,
    "vstatus" : CMD_VSTATUS,
    "vstat" : CMD_VSTATUS,
    "vs" : CMD_VSTATUS,
    "clone" : CMD_CLONE,
    "co" : CMD_CLONE,
    "commit" : CMD_COMMIT,
    "com" : CMD_COMMIT,
    "ci" : CMD_COMMIT,
    "add" : CMD_ADD,
    "a" : CMD_ADD,
    "remove" : CMD_REMOVE,
    "rem" : CMD_REMOVE,
    "del" : CMD_REMOVE,
    "log" : CMD_LOG,
    "revert" : CMD_REVERT,
    "update" : CMD_UPDATE,
    "up" : CMD_UPDATE,
    "pull" : CMD_PULL,
    "push" : CMD_PUSH,
    "sync" : CMD_SYNC,
    "pending" : CMD_PEND,
    "pend" : CMD_PEND,
    "url" : CMD_URL,
    "loc" : CMD_URL,
    "backup" : CMD_BACKUP,
    "bkup" : CMD_BACKUP,
    "diff" : CMD_DIFF,
    "top" : CMD_TOP,
    }

### Help information
CMD_GROUPS = []
for i in range(0, len(CMD_NAMES)):
    CMD_GROUPS.append([])
for key,val in CMDS.iteritems():
    CMD_GROUPS[val].append(key)
for arr in CMD_GROUPS:
    arr.sort()
    arr.reverse()
    arr.append(CMDS[arr[0]])
CMD_GROUPS.sort()
CMD_HELP = \
[
    "Show the status of the local checkout.",
    "Use the underlying VCS command for status without filtering the output.",
    "Clone or checkout a repository.",
    "Commit outstanding changes.",
    "Add a file to the VCS.",
    "Remove a file from the VCS.",
    "Show the VCS version log.",
    "Revert unchecked in changes.",
    "Update the local checkout against the repository.",
    "Pull changes from a remote repository.",
    "Push local changes to a remote repository.",
    "Synchronize local checkout against a remote repository.",
    "Show pending updates.",
    "Show the URL of the remote repository.",
    "Backup unchecked in changes.",
    "Show the diff of unchecked in changes.",
    "Show the top directory of this checkout.",
]
VERSION = "0.0"
DESCRIPTION = \
    "VC is a common version control system frontend which provides a common interface for different VCS's. The default command is 'status'."


class VC(object):
    VCS = []

    def __init__(self, name, metadir, metacmd, cmds):
        self.name = name
        self.metadir = metadir
        self.metacmd = metacmd
        self.cmds = cmds
        self.topdir = None

    @staticmethod
    def detectByUrl(url):
        for vc in VC.VCS:
            if url[0] == vc.name:
                return url[1:], vc
        found = False
        for vc in VC.VCS:
            if vc.detectByUrl(url[0]):
                if found:
                    print "Ambiguous URL, please specify the VCS by name."
                    sys.exit(1)
                found = True
                ret = url, vc
        if found:
            return ret
        else:
            return url, None

    @staticmethod
    def _detectByUrl(url, urls):
        for prefix in urls:
            if re.search(prefix, url):
                return True
    
    @staticmethod
    def detectByPath():
        def recurseDetectVC(start, vc):
            last = None
            path = start.split(os.sep)
            for idx in range(0, len(path)):
                if idx == 0:
                    cur = os.sep.join(path)
                else:
                    cur = os.sep.join(path[:-idx])
                if vc.testPath(cur):
                    last = cur
                elif last:
                    return last
            return None
        start = os.getcwd()
        for vc in VC.VCS:
            top = None
            last = None
            path = start.split(os.sep)
            for idx in range(0, len(path)):
                if idx == 0:
                    cur = os.sep.join(path)
                else:
                    cur = os.sep.join(path[:-idx])
                if vc.testPath(cur):
                    last = cur
                elif last:
                    top = last
                    break
            if top:
                vc.topdir = top
                return vc

    def testPath(self, start):
        return os.path.exists(os.path.join(start, self.metadir))

    def runCmd(self, cmd, argv, noexit=False, ignore_ret=False,
               capture_output=False):
        orgcmd = cmd
        if isinstance(cmd, int):
            if isinstance(self.cmds[cmd], types.StringType):
                cmd = "%s %s %s" % (self.metacmd, self.cmds[cmd], " ".join(argv))
            elif isinstance(self.cmds[cmd], types.TupleType):
                cmd = "%s %s" % (" ".join(self.cmds[cmd]), " ". join(argv))
            elif isinstance(self.cmds[cmd], types.ListType):
                isfirst = True
                for subcmd in self.cmds[cmd]:
                    if isfirst:
                        isfirst = False
                        print "Running:", CMD_NAMES[subcmd]
                    else:
                        print "\nContinue: %s (Y/n) " % CMD_NAMES[subcmd], 
                        ret = sys.stdin.readline()
                        if ((not ret) or (len(ret) == 0) or (ret == "\n") or
                            ret.startswith("y") or ret.startswith("Y")):
                            pass
                        else:
                            print "Exiting early"
                            sys.exit(-1)
                    if self.runCmd(subcmd, argv, True, ignore_ret=ignore_ret,
                                   capture_output=capture_output) != 0:
                        print "Command failed, exiting early"
                return
            else:
                self.cmds[cmd](argv)
                return
        else:
            cmd = "%s %s %s" % (self.metacmd, cmd, " ".join(argv))
        cmd = self.filterCmd(cmd, orgcmd)
        if capture_output:
            ret = commands.getstatusoutput(cmd)
            if ((not noexit) or ((not ignore_ret) and (ret[0] != 0))):
                sys.exit(ret[0])
            else:
                return ret[1]
        else:
            ret = os.system(cmd)
            if ((not noexit) or ((not ignore_ret) and (ret != 0))):
                sys.exit(ret)
            else:
                return ret

    def filterCmd(self, cmd, orgcmd):
        return cmd
        
    def backupFile(self, path):
        tpath = path
        index = None
        while True:
            if index is None:
                tpath = path.replace("%s", "")
            else:
                tpath = path % ("-%d" % index)
            try:
                ret = os.stat(tpath)
            except OSError, e:
                if e.errno == 2:
                    return tpath.replace("%s", "")
                else:
                    raise e
            if index is None:
                index = 0
            else:
                index = index + 1
        return path.replace("%s", "")

    def cmdTop(self, argv):
        print self.topdir


class SVN(VC):
    URLS = ["^svn://", "^svn\\+ssh://", "^file://"]
    
    def __init__(self):
        VC.__init__(self, "svn", ".svn", "svn",
                    ["status", "status",  "checkout", "commit", "add", "remove",
                     "log", "revert", "update", "update", "commit",
                     [CMD_STATUS, CMD_UPDATE, CMD_COMMIT], # SYNC
                     "status -u", ("svnpath",), self.cmdBackup, "diff",
                     self.cmdTop])

    @staticmethod
    def detectByUrl(url):
        return VC._detectByUrl(url, SVN.URLS)

    def cmdBackup(self, argv):
        ret = self.runCmd("info", [], noexit=True, capture_output=True)
        rev = None
        for line in ret.split("\n"):
            if line.startswith("Revision: "):
                words = line.split(":")
                rev = words[1].strip()
                break
        path = "backup-r%s" % rev
        path = self.backupFile(path + "%s.diff")
        self.runCmd("diff > %s" % path, [], noexit=True)
        print "Backed up to:", path


class HG(VC):
    URLS = ["^hg://", "^file://", "^ssh://", "^http[s]?://"]
    RX_TIP = re.compile("^tip[ \t]+.*")

    def __init__(self):
        VC.__init__(self, "hg", ".hg", "hg",
                    ["status", "status", self.cmdClone, "commit", "add",
                     "remove", "log", "revert", "update", "pull", "push",
                     # SYNC
                     [CMD_STATUS, CMD_PULL, CMD_UPDATE, CMD_COMMIT, CMD_PUSH],
                     self.cmdPend, "paths", self.cmdBackup, "diff", self.cmdTop])

    @staticmethod
    def detectByUrl(url):
        return VC._detectByUrl(url, HG.URLS)

    def cmdClone(self, argv):
        argv[0] = re.sub(HG.URLS[0], "", argv[0])
        self.runCmd("clone", argv, True, True)

    def cmdPend(self, argv):
        print "Remote pending changesets:"
        self.runCmd("incoming", argv, True, True)
        print "\nLocal pending changesets:"
        rev = self.runCmd("identify -n", [], noexit=True,
                          capture_output=True).strip()
        rev = int(rev.rstrip("+"))
        ret = self.runCmd("tags", [], noexit=True, capture_output=True)
        for line in ret.split("\n"):
            if self.RX_TIP.match(line):
                words = line.split(" ")
                tip = int(words[-1:][0].split(":")[0])
                break
        if tip >= rev + 1:
            self.runCmd("log -r %d:tip" % (rev + 1), argv)

    def cmdBackup(self, argv):
        ret = self.runCmd("identify -n", [], noexit=True, capture_output=True)
        path = self.backupFile("backup-r" + ret.strip().rstrip("+") + "%s.diff")
        self.runCmd("diff > %s" % path, [], noexit=True)
        print path


class GIT(VC):
    URLS = ["^git://", ".*\\.git$", ".*\\.git/$", "^file://", "^ssh://",
            "^rsync://", "^http[s]?://", "^ftp[s]?://"]

    def __init__(self):
        VC.__init__(self, "git", ".git", "git",
                    ["status", "status", "clone", "commit", "add", "rm", "log",
                     "reset --hard", "pull", "fetch", "push", "SYNC", "PENDING",
                     "URL", "BACKUP", "diff", self.cmdTop])

    @staticmethod
    def detectByUrl(url):
        return VC._detectByUrl(url, GIT.URLS)


class CVS(VC):
    URLS = ["^cvs://"]

    def __init__(self):
        VC.__init__(self, "cvs", "CVS", "cvs",
                    [self.cmdStatus, "status", "checkout", "commit -R", "add -R",
                     "remove", "log", "update -C", "update", "update",
                     "commit -R", "SYNC", "PENDING", "URL", "BACKUP", "diff",
                     self.cmdTop])

    @staticmethod
    def detectByUrl(url):
        return VC._detectByUrl(url, CVS.URLS)

    def cmdStatus(self, argv):
        ret = self.runCmd("status", [], noexit=True, capture_output=True)
        short = None
        status = None
        repo = None
        pwd = None
        new = False
        for line in ret.split("\n"):
            if line.startswith("=====") or new:
                if short:
                    show = self.mapStatus(status)
                    if show:
                        if pwd:
                            name = os.path.join(pwd, short)
                        else:
                            name = short
                        print "%-8s%s" % (show, name)
                short = None
                status = None
                new = False
            elif line.startswith("File: "):
                idx = line.index("Status: ")
                short = line[6:idx-1].strip()
                status = line[idx+8:].strip()
            elif line.startswith("cvs status: Examining "):
                pwd = line.split()[-1:][0].strip()
                new = True
        if short:
            show = self.mapStatus(status)
            if show:
                if pwd:
                    name = os.path.join(pwd, short)
                else:
                    name = short
                print "%-8s%s" % (show, name)

    def mapStatus(self, status):
        if status == "Locally Added":
            return "A"
        elif status == "Locally Modified":
            return "M"
        elif status == "Up-to-date":
            return None
        else:
            return status


VC.VCS.extend([SVN(), HG(), GIT(), CVS()])

def doHelp(option, opt_str, value, parser):
    parser.print_help()
    print
    print "Commands:"
    for group in CMD_GROUPS:
        print "  ",
        start = True
        for cmd in group:
            if type(cmd) == types.StringType:
                if start:
                    sys.stdout.write("%s" % cmd)
                    start = False
                else:
                    sys.stdout.write(", %s" % cmd)
            else:
                print " -- ",
                print CMD_HELP[cmd]
    sys.exit(1)

def buildParser():
    parser = OptionParser(version=VERSION, description=DESCRIPTION,
                          usage="%prog [options] [cmd]")
    parser.remove_option("-h")
    parser.add_option("-h", "--help", action="callback", callback=doHelp)
    return parser

if __name__ == '__main__':
    parser = buildParser()
    (opts, args) = parser.parse_args()
    
    if len(args) > 0:
        cmd = args[0]
    else:
        cmd = "status"

    try:
        cmd = CMDS[cmd]
        if cmd == CMD_CLONE:
            if len(args) > 1:
                nargs, vc = VC.detectByUrl(args[1:])
                args = args[0:1] + nargs
            else:
                doHelp(None, None, None, parser)
        else:
            vc = VC.detectByPath()
        if not vc:
            print "Unable to detect version control system"
            sys.exit(1)
        if vc.topdir:
            os.chdir(vc.topdir)
    except IndexError:
        print "Unknown command:", cmd
        sys.exit(-1)
    except KeyError:
        print "Unknown command:", cmd
        sys.exit(-1)
    vc.runCmd(cmd, args[1:])
